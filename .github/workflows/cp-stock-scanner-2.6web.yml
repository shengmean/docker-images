name: cp-stock-scanner-2.6web # 工作流名称：将外部公开仓库内容复制到子文件夹
# 更新了名称，以更通用地反映可以复制整个仓库或指定文件夹

on:
  # push 事件触发：
  # 当代码被推送到除 main 分支以外的任何分支时，此工作流会触发。
  push:
    branches:
      - '**'
      - '!main' # 排除 main 分支，防止循环触发。如果您的主要分支是 master，请修改此处为 '!master'

  workflow_dispatch:
    inputs:
      source_repo_owner:
        description: '源仓库的拥有者/组织名 (例如: octocat)'
        required: true
        default: 'DR-lin-eng'
      source_repo_name:
        description: '源仓库名'
        required: true
        default: 'stock-scanner'
      source_branch:
        description: '源分支名称'
        required: false
        default: 'main'
      target_folder:
        description: '在您的仓库中，内容将被复制到的目标文件夹名称'
        required: false
        default: 'stock-scanner'
      source_folder_path: # 源仓库中的子文件夹路径
        description: '可选：指定源仓库中的一个子文件夹路径 (例如: docs/api)。如果为空，则复制整个仓库内容。'
        required: false
        default: '2.6 webapp（流式传输测试版）' # 默认指定此文件夹
      destination_subfolder_name: # <<<<<< 新增：指定目标子文件夹的名称 >>>>>>
        description: '可选：如果指定了源文件夹路径，内容将复制到目标文件夹下的这个子文件夹。如果为空，将保留源文件夹的名称。'
        required: false
        default: '2.6webapp' # 您希望复制到的新子目录名称
      commit_message:
        description: '自定义提交消息'
        required: false
        default: 'feat: Sync external public repository content'

permissions:
  contents: write

jobs:
  copy-external-content:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine trigger type and set variables # 设置变量
        id: set_variables
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "::set-output name=SOURCE_REPO_OWNER::${{ github.event.inputs.source_repo_owner }}"
            echo "::set-output name=SOURCE_REPO_NAME::${{ github.event.inputs.source_repo_name }}"
            echo "::set-output name=SOURCE_BRANCH::${{ github.event.inputs.source_branch }}"
            echo "::set-output name=TARGET_FOLDER::${{ github.event.inputs.target_folder }}"
            echo "::set-output name=SOURCE_FOLDER_PATH::${{ github.event.inputs.source_folder_path }}"
            echo "::set-output name=DESTINATION_SUBFOLDER_NAME::${{ github.event.inputs.destination_subfolder_name }}" # 新增
            echo "::set-output name=COMMIT_MESSAGE::${{ github.event.inputs.commit_message }}"
          else
            # 如果是 push 事件触发，使用预设的默认值
            # ！！请务必在此处根据您的需求修改这些默认值，使其指向您希望自动同步的仓库！！
            echo "::set-output name=SOURCE_REPO_OWNER::DR-lin-eng" # 请修改为您的源仓库拥有者
            echo "::set-output name=SOURCE_REPO_NAME::stock-scanner" # 请修改为您的源仓库名称
            echo "::set-output name=SOURCE_BRANCH::main" # 请修改为您的源分支
            echo "::set-output name=TARGET_FOLDER::stock-scanner" # 请修改为您的目标文件夹
            echo "::set-output name=SOURCE_FOLDER_PATH::" # 默认不指定源文件夹路径，复制整个仓库
            echo "::set-output name=DESTINATION_SUBFOLDER_NAME::" # Push触发时默认不指定目标子文件夹名称
            echo "::set-output name=COMMIT_MESSAGE::chore: Auto-sync external public repository content"
          fi
          echo "将使用源仓库: ${{ steps.set_variables.outputs.SOURCE_REPO_OWNER }}/${{ steps.set_variables.outputs.SOURCE_REPO_NAME }}"
          echo "将使用源分支: ${{ steps.set_variables.outputs.SOURCE_BRANCH }}"
          echo "源文件夹路径 (如果指定): '${{ steps.set_variables.outputs.SOURCE_FOLDER_PATH }}'"
          echo "目标子文件夹名称 (如果指定): '${{ steps.set_variables.outputs.DESTINATION_SUBFOLDER_NAME }}'"
          echo "将内容复制到目标文件夹: ${{ steps.set_variables.outputs.TARGET_FOLDER }}"

      - name: Create temporary directory for external repo
        run: mkdir -p "${{ steps.set_variables.outputs.TARGET_FOLDER }}_temp"

      - name: Checkout source repository into temporary directory
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.set_variables.outputs.SOURCE_REPO_OWNER }}/${{ steps.set_variables.outputs.SOURCE_REPO_NAME }}
          ref: ${{ steps.set_variables.outputs.SOURCE_BRANCH }}
          path: ${{ steps.set_variables.outputs.TARGET_FOLDER }}_temp

      - name: Clean and copy content
        run: |
          TARGET_FOLDER="${{ steps.set_variables.outputs.TARGET_FOLDER }}"
          TEMP_EXTERNAL_REPO_PATH="${{ steps.set_variables.outputs.TARGET_FOLDER }}_temp"
          SOURCE_FOLDER_PATH="${{ steps.set_variables.outputs.SOURCE_FOLDER_PATH }}"
          DESTINATION_SUBFOLDER_NAME="${{ steps.set_variables.outputs.DESTINATION_SUBFOLDER_NAME }}" # 新增的变量

          # 确保临时克隆的仓库中没有 .git 文件夹
          if [ -d "$TEMP_EXTERNAL_REPO_PATH/.git" ]; then
            echo "Removing .git folder from temporary cloned repository."
            rm -rf "$TEMP_EXTERNAL_REPO_PATH/.git"
          fi

          # 移除现有的目标文件夹内容，确保完全同步和清理
          if [ -d "$TARGET_FOLDER" ]; then
            echo "Removing existing target folder: $TARGET_FOLDER"
            rm -rf "$TARGET_FOLDER"
          fi
          
          # 创建目标文件夹以备复制
          mkdir -p "$TARGET_FOLDER"
          
          # ==== 核心逻辑：根据 SOURCE_FOLDER_PATH 和 DESTINATION_SUBFOLDER_NAME 进行条件复制 ====
          if [ -n "$SOURCE_FOLDER_PATH" ]; then # 如果 SOURCE_FOLDER_PATH 不为空 (即指定了文件夹)
            echo "指定了源文件夹路径: '$SOURCE_FOLDER_PATH'"
            SOURCE_FULL_PATH="$TEMP_EXTERNAL_REPO_PATH/$SOURCE_FOLDER_PATH"
            
            if [ -d "$SOURCE_FULL_PATH" ]; then
              if [ -n "$DESTINATION_SUBFOLDER_NAME" ]; then # 如果指定了目标子文件夹名称
                TARGET_SUBFOLDER="$TARGET_FOLDER/$DESTINATION_SUBFOLDER_NAME"
                echo "将源文件夹 '$SOURCE_FOLDER_PATH' 的内容复制到目标路径 '$TARGET_SUBFOLDER'。"
                mkdir -p "$TARGET_SUBFOLDER"
                cp -r "$SOURCE_FULL_PATH/." "$TARGET_SUBFOLDER/" || true
              else # 如果未指定目标子文件夹名称，则保留源文件夹名称进行复制
                echo "未指定目标子文件夹名称。将源文件夹 '$SOURCE_FOLDER_PATH' 复制到目标文件夹 '$TARGET_FOLDER' 内部，保留其名称。"
                cp -r "$SOURCE_FULL_PATH" "$TARGET_FOLDER/" || true
              fi
            else
              echo "错误: 指定的源文件夹 '$SOURCE_FULL_PATH' 在源仓库中不存在。请检查路径是否正确。"
              exit 1 # 找不到文件夹则退出失败
            fi
          else # 如果 SOURCE_FOLDER_PATH 为空 (即复制整个仓库)
            echo "未指定源文件夹路径，复制整个源仓库内容到目标文件夹 '$TARGET_FOLDER'。"
            # 复制除 .git 之外的所有内容
            cp -r "$TEMP_EXTERNAL_REPO_PATH/." "$TARGET_FOLDER/" || true
          fi
          # =======================================================
          
          # 清理临时目录
          echo "Cleaning up temporary directory: $TEMP_EXTERNAL_REPO_PATH"
          rm -rf "$TEMP_EXTERNAL_REPO_PATH"

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push changes
        run: |
          TARGET_FOLDER="${{ steps.set_variables.outputs.TARGET_FOLDER }}"
          COMMIT_MESSAGE="${{ steps.set_variables.outputs.COMMIT_MESSAGE }}"
          SOURCE_FOLDER_PATH="${{ steps.set_variables.outputs.SOURCE_FOLDER_PATH }}"
          DESTINATION_SUBFOLDER_NAME="${{ steps.set_variables.outputs.DESTINATION_SUBFOLDER_NAME }}"

          # 根据复制的实际情况，灵活地添加文件
          if [ -n "$SOURCE_FOLDER_PATH" ]; then # 如果指定了源文件夹路径
            if [ -n "$DESTINATION_SUBFOLDER_NAME" ]; then # 并且指定了目标子文件夹名称
              git add "$TARGET_FOLDER/$DESTINATION_SUBFOLDER_NAME"
            else # 没有指定目标子文件夹名称，则使用源文件夹的名称
              SOURCE_FOLDER_NAME=$(basename "$SOURCE_FOLDER_PATH")
              git add "$TARGET_FOLDER/$SOURCE_FOLDER_NAME"
            fi
          else
            # 否则，添加整个目标文件夹 (复制整个仓库内容的情况)
            git add "$TARGET_FOLDER"
          fi
          
          if git diff --cached --quiet; then
            echo "没有需要提交的更改。"
          else
            # 强化提交消息的默认值，使其包含更多信息
            GENERATED_COMMIT_MESSAGE="$COMMIT_MESSAGE"
            if [ -n "$SOURCE_FOLDER_PATH" ]; then
              if [ -n "$DESTINATION_SUBFOLDER_NAME" ]; then
                GENERATED_COMMIT_MESSAGE="chore: Sync external folder '${{ steps.set_variables.outputs.SOURCE_FOLDER_PATH }}' from ${{ steps.set_variables.outputs.SOURCE_REPO_OWNER }}/${{ steps.set_variables.outputs.SOURCE_REPO_NAME }} @ ${{ steps.set_variables.outputs.SOURCE_BRANCH }} into '$TARGET_FOLDER/$DESTINATION_SUBFOLDER_NAME'"
              else
                SOURCE_FOLDER_NAME=$(basename "$SOURCE_FOLDER_PATH")
                GENERATED_COMMIT_MESSAGE="chore: Sync external folder '${{ steps.set_variables.outputs.SOURCE_FOLDER_PATH }}' from ${{ steps.set_variables.outputs.SOURCE_REPO_OWNER }}/${{ steps.set_variables.outputs.SOURCE_REPO_NAME }} @ ${{ steps.set_variables.outputs.SOURCE_BRANCH }} into '$TARGET_FOLDER/$SOURCE_FOLDER_NAME'"
              fi
            else
              GENERATED_COMMIT_MESSAGE="chore: Sync entire repo from ${{ steps.set_variables.outputs.SOURCE_REPO_OWNER }}/${{ steps.set_variables.outputs.SOURCE_REPO_NAME }} @ ${{ steps.set_variables.outputs.SOURCE_BRANCH }} into '$TARGET_FOLDER'"
            fi

            git commit -m "$GENERATED_COMMIT_MESSAGE"
            git push origin HEAD:"${{ github.ref_name }}"
          fi
